# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import admin_pb2 as admin__pb2
import common_pb2 as common__pb2
import services_pb2 as services__pb2
import serving_pb2 as serving__pb2


class IndexServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Index = channel.unary_unary(
                '/com.vectara.IndexService/Index',
                request_serializer=services__pb2.IndexDocumentRequest.SerializeToString,
                response_deserializer=services__pb2.IndexDocumentResponse.FromString,
                )
        self.Delete = channel.unary_unary(
                '/com.vectara.IndexService/Delete',
                request_serializer=common__pb2.DeleteDocumentRequest.SerializeToString,
                response_deserializer=common__pb2.DeleteDocumentResponse.FromString,
                )


class IndexServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Index(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IndexServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Index': grpc.unary_unary_rpc_method_handler(
                    servicer.Index,
                    request_deserializer=services__pb2.IndexDocumentRequest.FromString,
                    response_serializer=services__pb2.IndexDocumentResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=common__pb2.DeleteDocumentRequest.FromString,
                    response_serializer=common__pb2.DeleteDocumentResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.vectara.IndexService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IndexService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Index(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.vectara.IndexService/Index',
            services__pb2.IndexDocumentRequest.SerializeToString,
            services__pb2.IndexDocumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.vectara.IndexService/Delete',
            common__pb2.DeleteDocumentRequest.SerializeToString,
            common__pb2.DeleteDocumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class QueryServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Query = channel.unary_unary(
                '/com.vectara.QueryService/Query',
                request_serializer=serving__pb2.BatchQueryRequest.SerializeToString,
                response_deserializer=serving__pb2.BatchQueryResponse.FromString,
                )
        self.StreamQuery = channel.unary_stream(
                '/com.vectara.QueryService/StreamQuery',
                request_serializer=serving__pb2.BatchQueryRequest.SerializeToString,
                response_deserializer=serving__pb2.ResponseSet.FromString,
                )


class QueryServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Query(self, request, context):
        """A standard single-request, single-response endpoint designed for high performance.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamQuery(self, request, context):
        """A streamed response interface when lower latency is absolutely critical.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Query': grpc.unary_unary_rpc_method_handler(
                    servicer.Query,
                    request_deserializer=serving__pb2.BatchQueryRequest.FromString,
                    response_serializer=serving__pb2.BatchQueryResponse.SerializeToString,
            ),
            'StreamQuery': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamQuery,
                    request_deserializer=serving__pb2.BatchQueryRequest.FromString,
                    response_serializer=serving__pb2.ResponseSet.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.vectara.QueryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class QueryService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.vectara.QueryService/Query',
            serving__pb2.BatchQueryRequest.SerializeToString,
            serving__pb2.BatchQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/com.vectara.QueryService/StreamQuery',
            serving__pb2.BatchQueryRequest.SerializeToString,
            serving__pb2.ResponseSet.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AdminServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateCorpus = channel.unary_unary(
                '/com.vectara.AdminService/CreateCorpus',
                request_serializer=admin__pb2.CreateCorpusRequest.SerializeToString,
                response_deserializer=admin__pb2.CreateCorpusResponse.FromString,
                )
        self.DeleteCorpus = channel.unary_unary(
                '/com.vectara.AdminService/DeleteCorpus',
                request_serializer=admin__pb2.DeleteCorpusRequest.SerializeToString,
                response_deserializer=admin__pb2.DeleteCorpusResponse.FromString,
                )
        self.ResetCorpus = channel.unary_unary(
                '/com.vectara.AdminService/ResetCorpus',
                request_serializer=admin__pb2.ResetCorpusRequest.SerializeToString,
                response_deserializer=admin__pb2.ResetCorpusResponse.FromString,
                )
        self.ListCorpora = channel.unary_unary(
                '/com.vectara.AdminService/ListCorpora',
                request_serializer=admin__pb2.ListCorporaRequest.SerializeToString,
                response_deserializer=admin__pb2.ListCorporaResponse.FromString,
                )


class AdminServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateCorpus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCorpus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetCorpus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCorpora(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AdminServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateCorpus': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCorpus,
                    request_deserializer=admin__pb2.CreateCorpusRequest.FromString,
                    response_serializer=admin__pb2.CreateCorpusResponse.SerializeToString,
            ),
            'DeleteCorpus': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCorpus,
                    request_deserializer=admin__pb2.DeleteCorpusRequest.FromString,
                    response_serializer=admin__pb2.DeleteCorpusResponse.SerializeToString,
            ),
            'ResetCorpus': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetCorpus,
                    request_deserializer=admin__pb2.ResetCorpusRequest.FromString,
                    response_serializer=admin__pb2.ResetCorpusResponse.SerializeToString,
            ),
            'ListCorpora': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCorpora,
                    request_deserializer=admin__pb2.ListCorporaRequest.FromString,
                    response_serializer=admin__pb2.ListCorporaResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.vectara.AdminService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AdminService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateCorpus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.vectara.AdminService/CreateCorpus',
            admin__pb2.CreateCorpusRequest.SerializeToString,
            admin__pb2.CreateCorpusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteCorpus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.vectara.AdminService/DeleteCorpus',
            admin__pb2.DeleteCorpusRequest.SerializeToString,
            admin__pb2.DeleteCorpusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetCorpus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.vectara.AdminService/ResetCorpus',
            admin__pb2.ResetCorpusRequest.SerializeToString,
            admin__pb2.ResetCorpusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListCorpora(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.vectara.AdminService/ListCorpora',
            admin__pb2.ListCorporaRequest.SerializeToString,
            admin__pb2.ListCorporaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
